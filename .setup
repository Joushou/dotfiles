#!/bin/sh
#
# Dotfiles setup script from https://github.com/Joushou/dotfiles
#
# Use as you please, but give some credit, will ya'?
#

# This is manually set
GITPATH=https://github.com/Joushou/dotfiles.git

# Toggles for command-line options
UPGRADE=0
UPDATE=0
VERIFY=0
DRYRUN=1
CASK=0
OSXCONF=0
VERBOSE=1

# Color stuff
case $TERM in
	xterm*)
		RED_START="\033[1;31m"
		GREEN_START="\033[1;32m"
		WHITE_START="\033[1;37m"
		COLOR_END="\033[0m"
		;;
	screen*)
		RED_START="\033[1;31m"
		GREEN_START="\033[1;32m"
		WHITE_START="\033[1;37m"
		COLOR_END="\033[0m"
		;;
esac

###################################
#
# Utility functions
#

# This is stupid, but it works
is_set() {
	return $1
}

# Log error and exit
error() {
	printf '%b' "$RED_START! $1$COLOR_END\n"
	exit 1
}

# Log
log() {
	printf '%b' "$WHITE_START> $1$COLOR_END\n"
}

# Run, log and handle error
run() {
	printf '%b' "$WHITE_START>    $1$COLOR_END\n"
	cmd=${@#$1}
	success=1

	printf '%b' "[$1: $cmd]\n" >> .setup_log

	# TODO Fix logging in verbose mode

	if is_set $VERBOSE
	then
		is_set $DRYRUN || $cmd && success=0
	else
		is_set $DRYRUN || $cmd >> .setup_log 2>&1 && success=0
	fi

	printf '%b' "\n" >> .setup_log

	if [ "$success" = "1" ]
	then
		echo $output
		error "FAILED, check .setup_log for details"
	fi
}

###################################
#
# Generic Setup
#

# Setup the dotfile git repo
setup_git() {
	log "Setting up repo"
	# Hacky "DIR IS NOT EMPTY!" workaround
	run "Init git" git init
	run "Add remote" git remote add origin $GITPATH
	run "Pull master" git pull --force origin master
	run "Init submodules" git submodule update --init
}

# Prepare vim
setup_vim() {
	log "Setting up VIM"
	run "Make extra .vim subdirectories" mkdir .vim/backup .vim/swap .vim/undo
	run "Install plugins" vim +PluginInstall +qall
	run "Wait for sanity" sleep 1
	run "Make tty sane" stty sane
}

# Setup dispatcher
setup() {
	setup_git
	setup_vim
}

###################################
#
# OS X specific stuff
#

# Set defaults
osx_conf() {
	log "Configuring OS X"
	run "Be silent on boot" sudo nvram SystemAudioVolume=" "
	run "Increasing window resize speed" defaults write NSGlobalDomain NSWindowResizeTime -float 0.001
	run "Increasing mission control animation speed" defaults write com.apple.dock expose-animation-duration -float 0.1
	run "Setting fast key repeat" defaults write NSGlobalDomain KeyRepeat -int 0
	run "Always use sub-pixel font rendering" defaults write NSGlobalDomain AppleFontSmoothing -int 2
	run "Setting Dock scaling effect" defaults write com.apple.dock mineffect -string "scale"
	run "Setting Terminal.app UTF-8 mode" defaults write com.apple.terminal StringEncodings -array 4
}

# Setup brew and install packages
pre_osx() {
	is_set $OSXCONF && osx_conf

	log "Installing packages"
	which brew > /dev/null || run "Install brew" ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

	is_set $UPDATE && run "Updating brew" brew update
	is_set $UPGRADE && run "Upgrading brew" brew upgrade
	is_set $VERIFY && run "Verifying brew" brew doctor

	run "Installing dupe tap" brew tap homebrew/dupes

	is_set $CASK && run "Setting up cask" brew install caskroom/cask/brew-cask

	# shell stuff
	run "Shell stuff" brew install tmux zsh coreutils findutils grep ascii

	# code stuff
	run "Code stuff" brew install autoconf automake ctags go git mercurial

	# editor stuff
	run "VIM" brew install vim
	is_set $CASK && run "MacVIM" brew cask install macvim
}

# Cleanup after brew and git
post_osx() {
	log "Cleaning up"
	run "Git" git gc --aggressive
	run "Brew" brew cleanup
}

###################################
#
# Linux
#

# TODO: Add pacman, yum support.

# Install packages
pre_linux() {
	log "Installing packages"
	if which apt-get > /dev/null
	then
		log "Using APT"
		is_set $UPDATE && run "Updating APT" sudo apt-get -y update
		is_set $UPGRADE && run "Upgrading packages" sudo apt-get -y upgrade
		
		# shell stuff
		run "Shell stuff" sudo apt-get -y install tmux zsh ascii

		# code stuff
		run "Code stuff" sudo apt-get -y install binutils autoconf automake ctags gdb clang golang git mercurial

		# editor stuff
		run "VIM" sudo apt-get -y install vim
	else
		error "Package manager unknown"
	fi
}

# Cleanup apt and git
post_linux() {
	log "Cleaning up"
	run "Git" git gc --aggressive
	which apt-get > /dev/null && run "APT" sudo apt-get clean
}

#
# Main
#

# TODO: Add force OS option

cd ~

for i in $@
do
	if [ "$i" = "--no-upgrade" ]
	then
		UPGRADE=1
	elif [ "$i" = "--no-update" ]
	then
		UPDATE=1
	elif [ "$i" = "--no-verify" ]
	then
		VERIFY=1
	elif [ "$i" = "--dry-run" ]
	then
		DRYRUN=0
	elif [ "$i" = "--no-cask" ]
	then
		CASK=1
	elif [ "$i" = "--no-osx-conf" ]
	then
		OSXCONF=1
	elif [ "$i" = "--verbose" ]
	then
		VERBOSE=0
	fi
done

log "Starting setup"

run "Requesting sudo rights" sudo -v

# TODO: Add FreeBSD support.

case "$OSTYPE" in
	darwin*)
		log "OS X detected"
		pre_osx
		setup
		post_osx
		;;
	linux*)
		log "Linux detected"
		pre_linux
		setup
		post_linux
		;;
	*)
		# We might just be on a dash-based OS which doesn't give us OSTYPE (ubuntu/debian)
		if [ -e /etc/debian_version ]
		then
			pre_linux
			setup
			post_linux
		else
			
			error "Platform of type $OSTYPE not supported"
		fi
		;;
esac

log "All done"

