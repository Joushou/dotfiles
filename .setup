#!/bin/sh
#
# Detect platform
#

cd ~

GITPATH=https://github.com/Joushou/dotfiles.git

setup_git() {
	echo "   > Setting up repo"
	# Hacky "DIR IS NOT EMPTY!" workaround
	git init
	git remote add origin $GITPATH
	git pull --force origin master
	git submodule update --init
}

setup_vim() {
	echo "   > Setting up VIM"
	mkdir .vim/backup .vim/swap .vim/undo
	vim +PluginInstall +qall
	stty sane
}

setup() {
	setup_git
	setup_vim
}

osx_conf() {
	echo "   > Configuring OS X"
	sudo nvram SystemAudioVolume=" " # Be silent on boot
	defaults write NSGlobalDomain NSWindowResizeTime -float 0.001 # Increase window resize speed
	defaults write com.apple.dock expose-animation-duration -float 0.1 # Faster mission control
	defaults write NSGlobalDomain KeyRepeat -int 0 # Fast key repeat
	defaults write NSGlobalDomain AppleFontSmoothing -int 2 # Enable sub-pixel font rendering on non-Apple LCD's
	defaults write com.apple.dock mineffect -string "scale"
	defaults write com.apple.terminal StringEncodings -array 4 # Make Terminal UTF-8 only
}

pre_osx() {
	osx_conf

	echo "   > Setting up brew"
	which brew > /dev/null || ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

	brew update
	brew upgrade
	brew doctor

	echo "   > Setting up dupe tap"
	brew tap homebrew/dupes

	echo "   > Setting up cask"
	brew install caskroom/cask/brew-cask

	echo "   > Installing packages"

	# shell stuff
	brew install tmux zsh coreutils findutils grep ascii

	# code stuff
	brew install autoconf automake ctags go git

	# editor stuff
	brew install vim
	brew cask install macvim
}

post_osx() {
	echo "   > Cleaning up"
	git gc --aggressive
	brew cleanup
}

pre_linux() {
	echo "   > Installing packages"
	if which apt-get > /dev/null
	then
		echo "   > Using APT"
		# shell stuff
		sudo apt-get install tmux zsh ascii

		# code stuff
		sudo apt-get install binutils autoconf automake ctags gdb clang golang git

		# editor stuff
		sudo brew install vim
	else
		echo "   ! Unknown Linux distribution"
		exit 1
	fi
}

post_linux() {
	return
}

echo "   > Requesting sudo rights"
sudo -v

echo "   > Starting setup"

case "$OSTYPE" in
	darwin*)
		echo "   > OS X detected"
		pre_osx
		setup
		post_osx
		;;
	linux*)
		echo "   > Linux detected"
		pre_linux
		setup
		post_linux
		;;
	*)
		# We might just be on a dash-based OS which doesn't give us OSTYPE (ubuntu/debian)
		if [ -e /etc/debian_version ]
		then
			pre_linux
			setup
			post_linux
		else
			echo "Platform of type $OSTYPE not supported"
			exit 1
		fi
		;;
esac

echo "   > All done"
