#!/bin/sh
#
# Dotfiles setup script from https://github.com/Joushou/dotfiles
#
# Use as you please, but give some credit, will ya'?
#

GITPATH=https://github.com/Joushou/dotfiles.git

# Toggles for command-line options
OPT_UPGRADE=0
OPT_UPDATE=0
OPT_VERIFY=0
OPT_DRYRUN=1
OPT_CASK=0
OPT_CONF=0
OPT_TOOLCHAIN=0
OPT_SHELL=0
OPT_DUPES=0
OPT_VERBOSE=1

# Color stuff
case $TERM in
	xterm*)
		RED_START="\033[1;31m"
		GREEN_START="\033[1;32m"
		YELLOW_START="\033[1;33m"
		WHITE_START="\033[1;37m"
		COLOR_END="\033[0m"
		;;
	screen*)
		RED_START="\033[1;31m"
		GREEN_START="\033[1;32m"
		YELLOW_START="\033[1;33m"
		WHITE_START="\033[1;37m"
		COLOR_END="\033[0m"
		;;
esac

###############################################################################
#                                                                             #
# Utility functions                                                           #
#                                                                             #
###############################################################################

# This is stupid, but it works
is_set() {
	return $1
}

# Checks if the tool is available
in_path() {
	ret=which $1 1>/dev/null 2>/dev/null
	printf '%b' "[tool availability check for $1: $ret]\n" >> .setup_log
	return $ret
}

# Log error and exit
error() {
	printf '%b' "$RED_START! $1$COLOR_END\n"
	printf '%b' "! $1\n" >> .setup_log
	exit 1
}

# Log
log() {
	printf '%b' "$GREEN_START> $WHITE_START$1$COLOR_END\n"
	printf '%b' "> $1\n" >> .setup_log
}

# Run, log and handle error
run() {
	printf '%b' "$GREEN_START>    $YELLOW_START$1$COLOR_END\n"
	printf '%b' ">    $1\n" >> .setup_log
	cmd=${@#$1}
	success=1

	printf '%b' "[$1: $cmd]\n" >> .setup_log

	# TODO Fix logging in verbose mode

	if is_set $OPT_VERBOSE
	then
		is_set $OPT_DRYRUN || $cmd && success=0
	else
		is_set $OPT_DRYRUN || $cmd >> .setup_log 2>&1 && success=0
	fi

	printf '%b' "\n" >> .setup_log

	if [ "$success" = "1" ]
	then
		echo $output
		error "FAILED, check .setup_log for details"
	fi
}

###############################################################################
#                                                                             #
# Generic Setup                                                               #
#                                                                             #
# TODO setup antigen for zsh                                                  #
###############################################################################

# Setup the dotfile git repo
setup_git() {
	log "Setting up dotfiles repo"
	# Hacky "DIR IS NOT EMPTY!" workaround
	run "Init git" git init
	run "Add remote" git remote add origin $GITPATH
	run "Pull master" git pull --force origin master
	run "Init submodules" git submodule update --init
}

# Prepare vim
setup_vim() {
	log "Setting up VIM"
	run "Make extra .vim subdirectories" mkdir .vim/backup .vim/swap .vim/undo
	run "Install plugins" vim +PluginInstall +qall
	sleep 0.5
	run "Make tty sane" stty sane
}

# Prepare antigen
setup_antigen() {
	log "Setting up antigen"
	run "Clone repo" git clone https://github.com/zsh-users/antigen.git .antigen
}

# Setup dispatcher
setup() {
	setup_git
	setup_vim
	is_set $OPT_SHELL && setup_antigen
}

###############################################################################
#                                                                             #
# OS X specific stuff                                                         #
#                                                                             #
###############################################################################

# Set defaults
osx_conf() {
	log "Configuring OS X"
	run "Be silent on boot" sudo nvram SystemAudioVolume=" "
	run "Increasing window resize speed" defaults write NSGlobalDomain NSWindowResizeTime -float 0.001
	run "Increasing mission control animation speed" defaults write com.apple.dock expose-animation-duration -float 0.1
	run "Setting fast key repeat" defaults write NSGlobalDomain KeyRepeat -int 0
	run "Always use sub-pixel font rendering" defaults write NSGlobalDomain AppleFontSmoothing -int 2
	run "Setting Dock scaling effect" defaults write com.apple.dock mineffect -string "scale"
	run "Setting Terminal.app UTF-8 mode" defaults write com.apple.terminal StringEncodings -array 4
}

# Setup brew and install packages
pre_osx() {
	is_set $OPT_CONF &&			osx_conf

										log "Installing packages"
	in_path brew ||				run "Install brew" ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

	is_set $OPT_UPDATE &&		run "Updating brew" brew update
	is_set $OPT_UPGRADE &&		run "Upgrading brew" brew upgrade
	is_set $OPT_VERIFY &&		run "Verifying brew" brew doctor

	is_set $OPT_DUPES &&			run "Installing dupe tap" brew tap homebrew/dupes

	is_set $OPT_CASK &&			run "Setting up cask" brew install caskroom/cask/brew-cask
	
										# TODO zsh is technically a dupe, as zsh is bundled in old version
	is_set $OPT_SHELL &&			run "Shell" brew install tmux zsh
	is_set $OPT_DUPES &&			run "Newer shell utils" brew install coreutils findutils grep
										run "Shell utils" brew install ascii
										run "Version control" brew install git mercurial
										run "Code assist" brew install ctags
	is_set $OPT_TOOLCHAIN &&	run "Toolchain" brew install autoconf automake go

										# editor stuff
	is_set $OPT_DUPES &&			run "VIM" brew install vim
	is_set $OPT_CASK &&			run "MacVIM" brew cask install macvim
}

# Cleanup after brew and git
post_osx() {
	log "Cleaning up"
	run "Git" git gc --aggressive
	run "Brew" brew cleanup
}

###############################################################################
#                                                                             #
# Linux                                                                       #
#                                                                             #
# TODO: Add pacman, yum support.                                              #
###############################################################################

# Install packages
pre_linux() {
	log "Installing packages"
	if in_path apt-get
	then
		log "Using APT"
		is_set $OPT_UPDATE &&		run "Updating APT" sudo apt-get -y update
		is_set $OPT_UPGRADE &&		run "Upgrading packages" sudo apt-get -y upgrade
		
		is_set $OPT_SHELL &&			run "Shell" sudo apt-get -y install tmux zsh
											run "Shell utils" sudo apt-get -y install ascii
											run "Version control" sudo apt-get -y install git mercurial
											run "Code assist" sudo apt-get -y install ctags
		is_set $OPT_TOOLCHAIN &&	run "Toolchain" sudo apt-get -y install binutils autoconf automake gdb clang golang

											# editor stuff
											run "VIM" sudo apt-get -y install vim
	else
		error "Package manager unknown"
	fi
}

# Cleanup apt and git
post_linux() {
								log "Cleaning up"
								run "Git" git gc --aggressive
	in_path apt-get &&	run "APT" sudo apt-get clean
}

###############################################################################
#                                                                             #
# Main                                                                        #
#                                                                             #
###############################################################################


cd ~

#
# Handle parameters
#
# TODO: Add force OS option

for i in $@
do
	case $i in
		--no-upgrade)
			OPT_OPGRADE=1
			;;
		--no-update)
			OPT_UPDATE=1
			;;
		--no-verify)
			OPT_VERIFY=1
			;;
		--no-cask)
			OPT_CASK=1
			;;
		--no-conf)
			OPT_CONF=1
			;;
		--no-toolchain)
			OPT_TOOLCHAIN=1
			;;
		--no-shell)
			OPT_SHELL=1
			;;
		--no-dupes)
			OPT_DUPES=1
			;;
		--dry-run)
			OPT_DRYRUN=0
			;;
		--verbose)
			OPT_VERBOSE=0
			;;
		*)
			error "Unknown parameter: $i"
			;;
	esac
done

log "Starting setup"

run "Requesting sudo rights" sudo -v

#
# OS detect
#
# TODO BSD?

case "$OSTYPE" in
	darwin*)
		log "OS X detected"
		pre_osx
		setup
		post_osx
		;;
	linux*)
		log "Linux detected"
		pre_linux
		setup
		post_linux
		;;
	*)
		# We might just be on a dash-based OS which doesn't give us OSTYPE (ubuntu/debian)
		if [ -e /etc/debian_version ]
		then
			pre_linux
			setup
			post_linux
		else
			
			error "Platform of type $OSTYPE not supported"
		fi
		;;
esac

log "All done"

